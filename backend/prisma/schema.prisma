// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password String? @db.VarChar(255)
  name      String
  avatarUrl String?
  provider  String   @default("email")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  groupMemberships GroupMember[]
  expensesPaid    Expense[]
  expenseShares   ExpenseShare[]
  settlementsFrom Settlement[] @relation("SettlementFrom")
  settlementsTo   Settlement[] @relation("SettlementTo")

  @@map("users")
}

model Group {
  id        String   @id @default(uuid())
  name      String
  currency  String   @default("USD")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  members   GroupMember[]
  expenses  Expense[]
  settlements Settlement[]

  @@map("groups")
}

model GroupMember {
  id      String      @id @default(uuid())
  userId  String
  groupId String
  role    GroupRole   @default(MEMBER)

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("group_members")
}

model Expense {
  id          String      @id @default(uuid())
  groupId     String
  payerId     String
  description String
  amount      Decimal     @db.Decimal(12, 2)
  split       SplitType   @default(EQUAL)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  group       Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  payer       User          @relation(fields: [payerId], references: [id])
  shares      ExpenseShare[]

  @@map("expenses")
}

model ExpenseShare {
  id        String  @id @default(uuid())
  expenseId String
  userId    String
  amountOwed Decimal @db.Decimal(12, 2)

  // Relations
  expense Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@unique([expenseId, userId])
  @@map("expense_shares")
}

model Settlement {
  id        String   @id @default(uuid())
  groupId   String
  fromUserId String
  toUserId   String
  amount    Decimal  @db.Decimal(12, 2)
  createdAt DateTime @default(now())

  // Relations
  group     Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  fromUser  User  @relation("SettlementFrom", fields: [fromUserId], references: [id])
  toUser    User  @relation("SettlementTo", fields: [toUserId], references: [id])

  @@map("settlements")
}

enum GroupRole {
  OWNER
  MEMBER
}

enum SplitType {
  EQUAL
  CUSTOM
}
