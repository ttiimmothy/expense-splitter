services:
  postgres:
    # moving tag that always points to the latest 17.x release with Alpine, now is 17.6 
    image: postgres:17-alpine
    restart: always
    container_name: db
    environment:
      POSTGRES_DB: expense_splitter
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mysecretpassword
    # to ensure pgadmin can be functional for detecting the postgres service db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d expense_splitter"]
      interval: 5s
      timeout: 3s
      retries: 10
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
  pgadmin:
    image: dpage/pgadmin4:latest
    restart: always
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  backend:
    build:
      context: .
    container_name: backend
    ports:
      - "3001:3001"
    # for using environment after the container starts, if the env variable only needs when building the service, don't need to set env_file
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    # volumes likely delete for backend in production
    # volumes:
      # this can help update the backend directly from the localhost, no need to rebuild the image every time you tweak code
      # - .:/app
      # kep a proper container-native node_modules, not to get shadowed by local node modules
      # - /app/node_modules
    restart: unless-stopped

volumes:
  postgres_data:
  pgadmin_data:
